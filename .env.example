# MCP Orch 환경 설정 예시 파일
# 이 파일을 복사하여 .env 파일을 생성하고 실제 값으로 변경하세요

# 애플리케이션 환경 (development, production)
ENV=development

# 서버 설정
SERVER__HOST=0.0.0.0
SERVER__PORT=8000
SERVER__MODE=proxy
SERVER__LOG_LEVEL=INFO

# DATABASE CONFIGURATION (Choose ONE option)
# OPTION 1: Database URL (Recommended - works for all environments)
DATABASE_URL=postgresql+asyncpg://mcp_orch:change-me-in-production@localhost:5432/mcp_orch

# Cloud database examples (uncomment and modify as needed):
# AWS RDS:
# DATABASE_URL=postgresql+asyncpg://admin:password@mcp-db.cluster-xxx.us-east-1.rds.amazonaws.com:5432/mcp_orch
# Supabase:
# DATABASE_URL=postgresql+asyncpg://postgres:password@db.xxx.supabase.co:5432/postgres

# OPTION 2: Individual connection settings (Alternative for simple environments)
# Comment out DATABASE_URL above if using these individual settings
# DB_HOST=localhost
# DB_PORT=5432
# DB_USER=mcp_orch
# DB_PASSWORD=change-me-in-production
# DB_NAME=mcp_orch

SQL_ECHO=false

# 보안 설정
SECURITY__ENABLE_AUTH=true

# === SECURITY CONFIGURATION ===
# JWT Secret (shared between frontend/backend, MUST be changed in production)
AUTH_SECRET=your-secret-key-here-change-in-production

# === ADMIN USER SETUP ===
# How to become an admin:
# 1. Start the application (no initial admin configuration needed)
# 2. Sign up through the web interface (Google/GitHub OAuth or email)
# 3. Stop the application and set your email below
# 4. Restart the application - your account will automatically get admin privileges
# 
# INITIAL_ADMIN_EMAIL=your-email@example.com

# === 프론트엔드 환경변수 ===
# NextAuth.js와 API 통신 설정
NEXT_PUBLIC_MCP_API_URL=http://localhost:8000

# === MCP Session Manager 설정 ===
# Session timeout: How long to keep unused MCP server sessions alive (in minutes)
# Default: 30 minutes
MCP_SESSION_TIMEOUT_MINUTES=30

# Cleanup interval: How often to check for expired sessions (in minutes)
# Default: 5 minutes (sessions unused for session_timeout_minutes will be terminated)
MCP_SESSION_CLEANUP_INTERVAL_MINUTES=5

# === MCP 데이터 암호화 키 ===
# CRITICAL: This key is used to encrypt MCP server arguments and environment variables
# If you lose this key, encrypted server data cannot be recovered
# For production, generate a secure random key and never share it
# Generate command: python3 -c "import secrets; print(secrets.token_urlsafe(32))"
MCP_ENCRYPTION_KEY=your-secure-encryption-key-change-this-in-production

