# MCP Orch ÌôòÍ≤Ω ÏÑ§Ï†ï ÏòàÏãú ÌååÏùº
# Ïù¥ ÌååÏùºÏùÑ Î≥µÏÇ¨ÌïòÏó¨ .env ÌååÏùºÏùÑ ÏÉùÏÑ±ÌïòÍ≥† Ïã§Ï†ú Í∞íÏúºÎ°ú Î≥ÄÍ≤ΩÌïòÏÑ∏Ïöî

# Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò ÌôòÍ≤Ω (development, production)
ENV=development

# ÏÑúÎ≤Ñ ÏÑ§Ï†ï
SERVER__HOST=0.0.0.0
SERVER__PORT=8000
SERVER__MODE=proxy
SERVER__LOG_LEVEL=INFO

# DATABASE CONFIGURATION (Choose ONE option)
# OPTION 1: Database URL (Recommended - works for all environments)
# Note: search_path=mcp_orch ensures all tables use mcp_orch schema
DATABASE_URL=postgresql+asyncpg://mcp_orch:change-me-in-production@localhost:5432/mcp_orch?options=-csearch_path%3Dmcp_orch

# Cloud database examples (uncomment and modify as needed):
# AWS RDS:
# DATABASE_URL=postgresql+asyncpg://admin:password@mcp-db.cluster-xxx.us-east-1.rds.amazonaws.com:5432/mcp_orch?options=-csearch_path%3Dmcp_orch
# Supabase:
# DATABASE_URL=postgresql+asyncpg://postgres:password@db.xxx.supabase.co:5432/postgres?options=-csearch_path%3Dmcp_orch

# OPTION 2: Individual connection settings (Alternative for simple environments)
# Comment out DATABASE_URL above if using these individual settings
# DB_HOST=localhost
# DB_PORT=5432
# DB_USER=mcp_orch
# DB_PASSWORD=change-me-in-production
# DB_NAME=mcp_orch

SQL_ECHO=false

# === SECURITY CONFIGURATION ===
# JWT Secret (shared between frontend/backend, MUST be changed in production)
AUTH_SECRET=your-secret-key-here-change-in-production

# === AUTHENTICATION POLICY ===
# Global authentication control (for development/testing only)
# - false: JWT authentication required for all API endpoints (default, recommended)
# - true: DISABLES all authentication - USE ONLY FOR DEVELOPMENT/TESTING
# WARNING: Setting DISABLE_AUTH=true makes all APIs accessible without authentication
# DISABLE_AUTH=false

# Auto-provisioning: Automatically create user accounts from OAuth/JWT tokens
# - true: Automatically creates accounts from valid OAuth tokens (good for open teams)
# - false: Requires manual account creation (recommended for controlled environments)
AUTO_PROVISION=false

# === ADMIN USER SETUP (HYBRID SYSTEM) ===
# Admin privileges are granted automatically using a hybrid approach:
#
# ü•á PRIORITY 1: Environment Variable (Explicit Admin)
#    Set INITIAL_ADMIN_EMAIL to designate a specific user as admin
#    This user will receive admin privileges when they sign up or at server startup
#
# ü•à PRIORITY 2: First User (Automatic Admin) 
#    If no INITIAL_ADMIN_EMAIL is set, the very first user to sign up
#    will automatically receive admin privileges
#
# Examples:
# Option A - Designate specific admin:
# INITIAL_ADMIN_EMAIL=admin@company.com
#
# Option B - Let first user become admin (comment out or leave empty):
# INITIAL_ADMIN_EMAIL=
#
# How it works:
# 1. If INITIAL_ADMIN_EMAIL is set: Only that specific email gets admin privileges
# 2. If INITIAL_ADMIN_EMAIL is not set: The first user to sign up becomes admin
# 3. All subsequent users are regular users (no admin privileges)
#
INITIAL_ADMIN_EMAIL=your-email@example.com

# === ÌîÑÎ°†Ìä∏ÏóîÎìú ÌôòÍ≤ΩÎ≥ÄÏàò ===
# NextAuth.jsÏôÄ API ÌÜµÏã† ÏÑ§Ï†ï
NEXT_PUBLIC_MCP_API_URL=http://localhost:8000

# === MCP Session Manager ÏÑ§Ï†ï ===
# Session timeout: How long to keep unused MCP server sessions alive (in minutes)
# Default: 30 minutes
MCP_SESSION_TIMEOUT_MINUTES=30

# Cleanup interval: How often to check for expired sessions (in minutes)
# Default: 5 minutes (sessions unused for session_timeout_minutes will be terminated)
MCP_SESSION_CLEANUP_INTERVAL_MINUTES=5

# === LOGGING CONFIGURATION ===
# Log level: DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL=INFO

# Log format: text (human-readable) or json (structured logging for production)
LOG_FORMAT=text

# Log output: console, file, or both
LOG_OUTPUT=console

# Log file path (only used when LOG_OUTPUT is "file" or "both")
# LOG_FILE_PATH=/var/log/mcp-orch/app.log

# Examples for different environments:
# Development (human-readable logs):
#   LOG_LEVEL=DEBUG
#   LOG_FORMAT=text
#   LOG_OUTPUT=console
#
# Production (structured logs for monitoring):
#   LOG_LEVEL=INFO
#   LOG_FORMAT=json
#   LOG_OUTPUT=both
#   LOG_FILE_PATH=/var/log/mcp-orch/app.log

# === MCP Îç∞Ïù¥ÌÑ∞ ÏïîÌò∏Ìôî ÌÇ§ ===
# CRITICAL: This key is used to encrypt MCP server arguments and environment variables
# If you lose this key, encrypted server data cannot be recovered
# For production, generate a secure random key and never share it
# Generate command: python3 -c "import secrets; print(secrets.token_urlsafe(32))"
MCP_ENCRYPTION_KEY=your-secure-encryption-key-change-this-in-production

