# MCP Orchestrator - Full Docker Deployment
# All services containerized for production use

services:
  # PostgreSQL Database
  postgresql:
    image: postgres:15
    container_name: mcp-orch-postgres
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgresql_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${DB_USER:-mcp_orch}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-mcp_password}
      - POSTGRES_DB=${DB_NAME:-mcp_orch}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-mcp_orch} -d ${DB_NAME:-mcp_orch}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - mcp-orch-network

  # Backend API Server (Production)
  mcp-orch-backend:
    build: 
      context: .
      dockerfile: Dockerfile.backend
    container_name: mcp-orch-backend
    ports:
      - "${SERVER__PORT:-8000}:8000"
    environment:
      - ENV=production
      - DB_HOST=postgresql
      - DB_PORT=5432
      - DB_USER=${DB_USER:-mcp_orch}
      - DB_PASSWORD=${DB_PASSWORD:-mcp_password}
      - DB_NAME=${DB_NAME:-mcp_orch}
      - SERVER__HOST=0.0.0.0
      - SERVER__PORT=8000
      - AUTH_SECRET=${AUTH_SECRET:-development-secret-key-change-in-production}
      - MCP_SERVER_BASE_URL=${MCP_SERVER_BASE_URL}
      - INITIAL_ADMIN_EMAIL=${INITIAL_ADMIN_EMAIL:-admin@example.com}
    depends_on:
      postgresql:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - mcp-orch-network

  # Backend API Server (Development)
  mcp-orch-backend-dev:
    build: 
      context: .
      dockerfile: Dockerfile.backend-dev
    container_name: mcp-orch-backend-dev
    ports:
      - "${DEV_SERVER_PORT:-8080}:8000"
    environment:
      - ENV=development
      - DB_HOST=postgresql
      - DB_PORT=5432
      - DB_USER=${DB_USER:-mcp_orch}
      - DB_PASSWORD=${DB_PASSWORD:-mcp_password}
      - DB_NAME=${DB_NAME:-mcp_orch}
      - SERVER__HOST=0.0.0.0
      - SERVER__PORT=8000
      - AUTH_SECRET=${AUTH_SECRET:-development-secret-key-change-in-production}
      - MCP_SERVER_BASE_URL=${MCP_SERVER_BASE_URL}
      - INITIAL_ADMIN_EMAIL=${INITIAL_ADMIN_EMAIL:-admin@example.com}
      - PYTHONPATH=/app/src
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
    volumes:
      # Mount source code for hot reload
      - .:/app
      # Mount Docker socket for Docker in Docker support
      - /var/run/docker.sock:/var/run/docker.sock
      # Cache directories
      - backend_dev_cache:/app/.uv-cache
    depends_on:
      postgresql:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - mcp-orch-network
    # Development-specific settings
    stdin_open: true
    tty: true

  # Frontend Web Interface
  mcp-orch-frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      args:
        NEXT_PUBLIC_MCP_API_URL: ${NEXT_PUBLIC_MCP_API_URL:-http://localhost:8000}
    container_name: mcp-orch-frontend
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      - NEXTAUTH_URL=${NEXTAUTH_URL:-http://localhost:${FRONTEND_PORT:-3000}}
      - NEXTAUTH_SECRET=${AUTH_SECRET:-development-secret-key-change-in-production}
      - AUTH_SECRET=${AUTH_SECRET:-development-secret-key-change-in-production}
      - NEXT_PUBLIC_MCP_API_URL=${NEXT_PUBLIC_MCP_API_URL:-http://localhost:8000}
    dns:
      - 8.8.8.8
      - 8.8.4.4
    depends_on:
      - mcp-orch-backend
    restart: unless-stopped
    networks:
      - mcp-orch-network

volumes:
  postgresql_data:
    driver: local
  backend_dev_cache:
    driver: local

networks:
  mcp-orch-network:
    driver: bridge
    ipam:
      config:
        - subnet: 10.123.0.0/16
          gateway: 10.123.0.1

# Usage:
# docker compose up -d