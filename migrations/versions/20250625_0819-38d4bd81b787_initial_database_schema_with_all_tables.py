"""Initial database schema with all tables

Revision ID: 38d4bd81b787
Revises: 
Create Date: 2025-06-25 08:19:19.993231

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '38d4bd81b787'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def table_exists(table_name):
    """Check if a table exists in the database."""
    bind = op.get_bind()
    inspector = sa.inspect(bind)
    return table_name in inspector.get_table_names()


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Create users table if it doesn't exist
    if not table_exists('users'):
        op.create_table('users',
            sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
            sa.Column('email', sa.String(length=255), nullable=False),
            sa.Column('name', sa.String(length=255), nullable=True),
            sa.Column('avatar_url', sa.String(length=500), nullable=True),
            sa.Column('is_active', sa.Boolean(), nullable=False),
            sa.Column('is_admin', sa.Boolean(), nullable=False),
            sa.Column('created_at', sa.DateTime(), nullable=False),
            sa.Column('updated_at', sa.DateTime(), nullable=False),
            sa.Column('last_login_at', sa.DateTime(), nullable=True),
            sa.PrimaryKeyConstraint('id'),
            sa.UniqueConstraint('email')
        )
    
    # Create teams table if it doesn't exist
    if not table_exists('teams'):
        op.create_table('teams',
            sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
            sa.Column('name', sa.String(length=255), nullable=False),
            sa.Column('description', sa.String(length=1000), nullable=True),
            sa.Column('slug', sa.String(length=255), nullable=False),
            sa.Column('avatar_url', sa.String(length=500), nullable=True),
            sa.Column('is_active', sa.Boolean(), nullable=False),
            sa.Column('settings', sa.JSON(), nullable=False),
            sa.Column('created_by_id', postgresql.UUID(as_uuid=True), nullable=False),
            sa.Column('created_at', sa.DateTime(), nullable=False),
            sa.Column('updated_at', sa.DateTime(), nullable=False),
            sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], ),
            sa.PrimaryKeyConstraint('id'),
            sa.UniqueConstraint('slug')
        )
    
    # Create team_members table if it doesn't exist
    if not table_exists('team_members'):
        op.create_table('team_members',
            sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
            sa.Column('team_id', postgresql.UUID(as_uuid=True), nullable=False),
            sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
            sa.Column('role', sa.Enum('OWNER', 'ADMIN', 'MEMBER', name='teamrole'), nullable=False),
            sa.Column('joined_at', sa.DateTime(), nullable=False),
            sa.Column('invited_by_id', postgresql.UUID(as_uuid=True), nullable=True),
            sa.ForeignKeyConstraint(['invited_by_id'], ['users.id'], ),
            sa.ForeignKeyConstraint(['team_id'], ['teams.id'], ),
            sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
            sa.PrimaryKeyConstraint('id'),
            sa.UniqueConstraint('team_id', 'user_id')
        )
    
    # Create projects table if it doesn't exist
    if not table_exists('projects'):
        op.create_table('projects',
            sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
            sa.Column('name', sa.String(length=255), nullable=False),
            sa.Column('description', sa.String(length=1000), nullable=True),
            sa.Column('slug', sa.String(length=255), nullable=False),
            sa.Column('team_id', postgresql.UUID(as_uuid=True), nullable=True),
            sa.Column('is_active', sa.Boolean(), nullable=False),
            sa.Column('settings', sa.JSON(), nullable=False),
            sa.Column('created_by_id', postgresql.UUID(as_uuid=True), nullable=False),
            sa.Column('created_at', sa.DateTime(), nullable=False),
            sa.Column('updated_at', sa.DateTime(), nullable=False),
            sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], ),
            sa.ForeignKeyConstraint(['team_id'], ['teams.id'], ),
            sa.PrimaryKeyConstraint('id'),
            sa.UniqueConstraint('slug')
        )
    
    # Create project_members table if it doesn't exist
    if not table_exists('project_members'):
        op.create_table('project_members',
            sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
            sa.Column('project_id', postgresql.UUID(as_uuid=True), nullable=False),
            sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
            sa.Column('role', sa.Enum('OWNER', 'ADMIN', 'MEMBER', 'VIEWER', name='projectrole'), nullable=False),
            sa.Column('joined_at', sa.DateTime(), nullable=False),
            sa.Column('invited_by_id', postgresql.UUID(as_uuid=True), nullable=True),
            sa.Column('invite_source', sa.Enum('DIRECT', 'TEAM', name='invitesource'), nullable=False),
            sa.ForeignKeyConstraint(['invited_by_id'], ['users.id'], ),
            sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ),
            sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
            sa.PrimaryKeyConstraint('id'),
            sa.UniqueConstraint('project_id', 'user_id')
        )
    
    # Create api_keys table if it doesn't exist
    if not table_exists('api_keys'):
        op.create_table('api_keys',
            sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
            sa.Column('name', sa.String(length=255), nullable=False),
            sa.Column('key_hash', sa.String(length=255), nullable=False),
            sa.Column('key_prefix', sa.String(length=8), nullable=False),
            sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
            sa.Column('project_id', postgresql.UUID(as_uuid=True), nullable=True),
            sa.Column('scopes', postgresql.ARRAY(sa.String()), nullable=False),
            sa.Column('is_active', sa.Boolean(), nullable=False),
            sa.Column('expires_at', sa.DateTime(), nullable=True),
            sa.Column('last_used_at', sa.DateTime(), nullable=True),
            sa.Column('usage_count', sa.Integer(), nullable=False),
            sa.Column('created_at', sa.DateTime(), nullable=False),
            sa.Column('updated_at', sa.DateTime(), nullable=False),
            sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ),
            sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
            sa.PrimaryKeyConstraint('id'),
            sa.UniqueConstraint('key_hash')
        )
    
    # Create api_usage table if it doesn't exist
    if not table_exists('api_usage'):
        op.create_table('api_usage',
            sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
            sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
            sa.Column('project_id', postgresql.UUID(as_uuid=True), nullable=True),
            sa.Column('api_key_id', postgresql.UUID(as_uuid=True), nullable=True),
            sa.Column('endpoint', sa.String(length=255), nullable=False),
            sa.Column('method', sa.String(length=10), nullable=False),
            sa.Column('status_code', sa.Integer(), nullable=False),
            sa.Column('request_size', sa.Integer(), nullable=True),
            sa.Column('response_size', sa.Integer(), nullable=True),
            sa.Column('duration_ms', sa.Integer(), nullable=True),
            sa.Column('timestamp', sa.DateTime(), nullable=False),
            sa.ForeignKeyConstraint(['api_key_id'], ['api_keys.id'], ),
            sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ),
            sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
            sa.PrimaryKeyConstraint('id')
        )
    
    # Create mcp_servers table if it doesn't exist
    if not table_exists('mcp_servers'):
        op.create_table('mcp_servers',
            sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
            sa.Column('project_id', postgresql.UUID(as_uuid=True), nullable=False),
            sa.Column('name', sa.String(length=255), nullable=False),
            sa.Column('display_name', sa.String(length=255), nullable=True),
            sa.Column('description', sa.String(length=1000), nullable=True),
            sa.Column('command', sa.String(length=500), nullable=False),
            sa.Column('args', sa.JSON(), nullable=True),
            sa.Column('env', sa.JSON(), nullable=True),
            sa.Column('_args_encrypted', sa.Text(), nullable=True, comment='Encrypted JSON of command arguments'),
            sa.Column('_env_encrypted', sa.Text(), nullable=True, comment='Encrypted JSON of environment variables'),
            sa.Column('cwd', sa.String(length=500), nullable=True),
            sa.Column('timeout', sa.Integer(), nullable=False),
            sa.Column('auto_approve', sa.JSON(), nullable=False),
            sa.Column('transport_type', sa.String(length=50), nullable=False),
            sa.Column('compatibility_mode', sa.String(length=50), nullable=False, comment='MCP compatibility mode: resource_connection (single mode)'),
            sa.Column('status', sa.Enum('ACTIVE', 'INACTIVE', 'ERROR', 'STARTING', 'STOPPING', name='mcpserverstatus'), nullable=False),
            sa.Column('is_enabled', sa.Boolean(), nullable=False),
            sa.Column('created_by_id', postgresql.UUID(as_uuid=True), nullable=False),
            sa.Column('created_at', sa.DateTime(), nullable=False),
            sa.Column('updated_at', sa.DateTime(), nullable=False),
            sa.Column('process_id', sa.Integer(), nullable=True),
            sa.Column('last_started_at', sa.DateTime(), nullable=True),
            sa.Column('last_error', sa.String(length=1000), nullable=True),
            sa.Column('total_tool_calls', sa.Integer(), nullable=False),
            sa.Column('last_used_at', sa.DateTime(), nullable=True),
            sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], ),
            sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ),
            sa.PrimaryKeyConstraint('id')
        )
    else:
        # If table exists, just update the comment
        op.alter_column('mcp_servers', 'compatibility_mode',
                   existing_type=sa.VARCHAR(length=50),
                   comment='MCP compatibility mode: resource_connection (single mode)',
                   existing_comment='MCP compatibility mode: api_wrapper (default) or resource_connection',
                   existing_nullable=False,
                   existing_server_default=sa.text("'api_wrapper'::character varying"))
    
    # Create mcp_tools table if it doesn't exist
    if not table_exists('mcp_tools'):
        op.create_table('mcp_tools',
            sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
            sa.Column('server_id', postgresql.UUID(as_uuid=True), nullable=False),
            sa.Column('name', sa.String(length=255), nullable=False),
            sa.Column('display_name', sa.String(length=255), nullable=True),
            sa.Column('description', sa.Text(), nullable=True),
            sa.Column('input_schema', sa.JSON(), nullable=True),
            sa.Column('call_count', sa.Integer(), nullable=False),
            sa.Column('last_called_at', sa.DateTime(), nullable=True),
            sa.Column('average_execution_time', sa.Integer(), nullable=True),
            sa.Column('discovered_at', sa.DateTime(), nullable=False),
            sa.Column('last_seen_at', sa.DateTime(), nullable=False),
            sa.ForeignKeyConstraint(['server_id'], ['mcp_servers.id'], ),
            sa.PrimaryKeyConstraint('id')
        )
    
    # Create server_logs table if it doesn't exist
    if not table_exists('server_logs'):
        op.create_table('server_logs',
            sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
            sa.Column('server_id', postgresql.UUID(as_uuid=True), nullable=False),
            sa.Column('level', sa.Enum('DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL', name='loglevel'), nullable=False),
            sa.Column('category', sa.Enum('STARTUP', 'SHUTDOWN', 'TOOL_CALL', 'ERROR', 'CONNECTION', 'SYSTEM', name='logcategory'), nullable=False),
            sa.Column('message', sa.Text(), nullable=False),
            sa.Column('details', sa.JSON(), nullable=True),
            sa.Column('timestamp', sa.DateTime(), nullable=False),
            sa.ForeignKeyConstraint(['server_id'], ['mcp_servers.id'], ),
            sa.PrimaryKeyConstraint('id')
        )
    
    # Create user_favorites table if it doesn't exist
    if not table_exists('user_favorites'):
        op.create_table('user_favorites',
            sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
            sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=False),
            sa.Column('server_id', postgresql.UUID(as_uuid=True), nullable=False),
            sa.Column('created_at', sa.DateTime(), nullable=False),
            sa.ForeignKeyConstraint(['server_id'], ['mcp_servers.id'], ),
            sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
            sa.PrimaryKeyConstraint('id'),
            sa.UniqueConstraint('user_id', 'server_id')
        )
    
    # Create client_sessions table if it doesn't exist
    if not table_exists('client_sessions'):
        op.create_table('client_sessions',
            sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
            sa.Column('server_id', postgresql.UUID(as_uuid=True), nullable=False),
            sa.Column('client_name', sa.String(length=255), nullable=False),
            sa.Column('session_data', sa.JSON(), nullable=True),
            sa.Column('created_at', sa.DateTime(), nullable=False),
            sa.Column('last_accessed_at', sa.DateTime(), nullable=False),
            sa.Column('expires_at', sa.DateTime(), nullable=False),
            sa.ForeignKeyConstraint(['server_id'], ['mcp_servers.id'], ),
            sa.PrimaryKeyConstraint('id')
        )
    
    # Create tool_call_logs table if it doesn't exist
    if not table_exists('tool_call_logs'):
        op.create_table('tool_call_logs',
            sa.Column('id', sa.Integer(), nullable=False),
            sa.Column('server_id', postgresql.UUID(as_uuid=True), nullable=False),
            sa.Column('tool_name', sa.String(length=255), nullable=False),
            sa.Column('arguments', sa.JSON(), nullable=True),
            sa.Column('status', sa.Enum('PENDING', 'SUCCESS', 'ERROR', 'TIMEOUT', name='callstatus'), nullable=False),
            sa.Column('result', sa.JSON(), nullable=True),
            sa.Column('error_message', sa.Text(), nullable=True),
            sa.Column('execution_time_ms', sa.Integer(), nullable=True),
            sa.Column('called_by_user_id', postgresql.UUID(as_uuid=True), nullable=True),
            sa.Column('timestamp', sa.DateTime(), nullable=False),
            sa.ForeignKeyConstraint(['called_by_user_id'], ['users.id'], ),
            sa.ForeignKeyConstraint(['server_id'], ['mcp_servers.id'], ),
            sa.PrimaryKeyConstraint('id')
        )
    
    # Create worker_configs table if it doesn't exist
    if not table_exists('worker_configs'):
        op.create_table('worker_configs',
            sa.Column('id', sa.Integer(), nullable=False),
            sa.Column('config_key', sa.String(length=255), nullable=False),
            sa.Column('config_value', sa.Text(), nullable=False),
            sa.Column('description', sa.String(length=500), nullable=True),
            sa.Column('created_at', sa.DateTime(), nullable=False),
            sa.Column('updated_at', sa.DateTime(), nullable=False),
            sa.PrimaryKeyConstraint('id'),
            sa.UniqueConstraint('config_key')
        )
    
    # Create activities table if it doesn't exist
    if not table_exists('activities'):
        op.create_table('activities',
            sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
            sa.Column('type', sa.Enum('SERVER_CREATED', 'SERVER_UPDATED', 'SERVER_DELETED', 'SERVER_STARTED', 'SERVER_STOPPED', 'TOOL_CALLED', 'PROJECT_CREATED', 'PROJECT_UPDATED', 'PROJECT_DELETED', 'TEAM_CREATED', 'TEAM_UPDATED', 'TEAM_DELETED', 'USER_JOINED', 'USER_LEFT', 'API_KEY_CREATED', 'API_KEY_DELETED', name='activitytype'), nullable=False),
            sa.Column('severity', sa.Enum('LOW', 'MEDIUM', 'HIGH', 'CRITICAL', name='activityseverity'), nullable=False),
            sa.Column('title', sa.String(length=255), nullable=False),
            sa.Column('description', sa.Text(), nullable=True),
            sa.Column('metadata', sa.JSON(), nullable=True),
            sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=True),
            sa.Column('project_id', postgresql.UUID(as_uuid=True), nullable=True),
            sa.Column('server_id', postgresql.UUID(as_uuid=True), nullable=True),
            sa.Column('team_id', postgresql.UUID(as_uuid=True), nullable=True),
            sa.Column('created_at', sa.DateTime(), nullable=False),
            sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ),
            sa.ForeignKeyConstraint(['server_id'], ['mcp_servers.id'], ),
            sa.ForeignKeyConstraint(['team_id'], ['teams.id'], ),
            sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
            sa.PrimaryKeyConstraint('id')
        )
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Only alter comment if mcp_servers table exists
    if table_exists('mcp_servers'):
        op.alter_column('mcp_servers', 'compatibility_mode',
                   existing_type=sa.VARCHAR(length=50),
                   comment='MCP compatibility mode: api_wrapper (default) or resource_connection',
                   existing_comment='MCP compatibility mode: resource_connection (single mode)',
                   existing_nullable=False,
                   existing_server_default=sa.text("'api_wrapper'::character varying"))
    
    # Note: We don't drop tables in downgrade for safety
    # ### end Alembic commands ###