"""add server_metadata column to mcp_servers

Revision ID: b8c0dc689156
Revises: 0943764c6ccf
Create Date: 2025-07-30 19:41:04.025687

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'b8c0dc689156'
down_revision: Union[str, None] = '0943764c6ccf'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('activities', 'type',
               existing_type=postgresql.ENUM('SERVER_CREATED', 'SERVER_UPDATED', 'SERVER_DELETED', 'SERVER_STARTED', 'SERVER_STOPPED', 'TOOL_CALLED', 'PROJECT_CREATED', 'PROJECT_UPDATED', 'PROJECT_DELETED', 'TEAM_CREATED', 'TEAM_UPDATED', 'TEAM_DELETED', 'USER_JOINED', 'USER_LEFT', 'API_KEY_CREATED', 'API_KEY_DELETED', 'TOOL_EXECUTED', 'TOOL_FAILED', 'MEMBER_INVITED', 'MEMBER_JOINED', 'MEMBER_REMOVED', 'MEMBER_ROLE_CHANGED', 'API_KEY_ROTATED', 'PROJECT_SETTINGS_UPDATED', 'TEAM_SETTINGS_UPDATED', 'SESSION_CREATED', 'SESSION_ENDED', 'SERVER_RESTARTED', name='activitytype'),
               type_=sa.String(length=50),
               existing_nullable=False)
    op.alter_column('activities', 'severity',
               existing_type=postgresql.ENUM('info', 'warning', 'error', 'success', name='activityseverity'),
               type_=sa.String(length=20),
               existing_nullable=False)
    op.alter_column('activities', 'ip_address',
               existing_type=sa.VARCHAR(length=45),
               type_=sa.String(length=255),
               existing_nullable=True)
    op.alter_column('activities', 'session_id',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=255),
               existing_nullable=True)
    op.alter_column('activities', 'tags',
               existing_type=postgresql.ARRAY(sa.VARCHAR()),
               type_=sa.JSON(),
               existing_nullable=True,
               postgresql_using='array_to_json(tags)')
    op.create_index('idx_activities_project_created', 'activities', ['project_id', 'created_at'], unique=False)
    op.create_index('idx_activities_resource', 'activities', ['resource_type', 'resource_id'], unique=False)
    op.create_index('idx_activities_severity', 'activities', ['severity', 'created_at'], unique=False)
    op.create_index('idx_activities_team_created', 'activities', ['team_id', 'created_at'], unique=False)
    op.create_index('idx_activities_type_created', 'activities', ['type', 'created_at'], unique=False)
    op.create_index('idx_activities_user_created', 'activities', ['user_id', 'created_at'], unique=False)
    op.drop_constraint(op.f('activities_team_id_fkey'), 'activities', type_='foreignkey')
    op.drop_constraint(op.f('activities_server_id_fkey'), 'activities', type_='foreignkey')
    op.drop_constraint(op.f('activities_project_id_fkey'), 'activities', type_='foreignkey')
    op.drop_constraint(op.f('activities_user_id_fkey'), 'activities', type_='foreignkey')
    op.create_foreign_key(None, 'activities', 'users', ['user_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(None, 'activities', 'teams', ['team_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'activities', 'projects', ['project_id'], ['id'], ondelete='CASCADE')
    op.alter_column('client_sessions', 'user_agent',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    # Add server_metadata column with default value for existing records
    op.add_column('mcp_servers', sa.Column('server_metadata', sa.JSON(), nullable=True, comment='Server metadata including failure tracking'))
    # Update existing records with empty JSON object
    op.execute("UPDATE mcp_servers SET server_metadata = '{}' WHERE server_metadata IS NULL")
    # Then make it NOT NULL
    op.alter_column('mcp_servers', 'server_metadata', nullable=False)
    op.alter_column('project_members', 'joined_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('projects', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('projects', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.create_index('idx_server_logs_category_timestamp', 'server_logs', ['category', 'timestamp'], unique=False)
    op.create_index('idx_server_logs_level_timestamp', 'server_logs', ['level', 'timestamp'], unique=False)
    op.create_index('idx_server_logs_server_timestamp', 'server_logs', ['server_id', 'timestamp'], unique=False)
    op.drop_constraint(op.f('server_logs_server_id_fkey'), 'server_logs', type_='foreignkey')
    op.create_foreign_key(None, 'server_logs', 'mcp_servers', ['server_id'], ['id'], ondelete='CASCADE')
    op.drop_constraint(op.f('teams_slug_key'), 'teams', type_='unique')
    op.drop_index(op.f('ix_teams_slug'), table_name='teams')
    op.create_index(op.f('ix_teams_slug'), 'teams', ['slug'], unique=True)
    op.create_index(op.f('ix_tool_call_logs_project_id'), 'tool_call_logs', ['project_id'], unique=False)
    op.create_index(op.f('ix_tool_call_logs_request_id'), 'tool_call_logs', ['request_id'], unique=False)
    op.create_index(op.f('ix_tool_call_logs_server_id'), 'tool_call_logs', ['server_id'], unique=False)
    op.create_index(op.f('ix_tool_call_logs_session_id'), 'tool_call_logs', ['session_id'], unique=False)
    op.create_index(op.f('ix_tool_call_logs_status'), 'tool_call_logs', ['status'], unique=False)
    op.create_index(op.f('ix_tool_call_logs_timestamp'), 'tool_call_logs', ['timestamp'], unique=False)
    op.create_index(op.f('ix_tool_call_logs_tool_name'), 'tool_call_logs', ['tool_name'], unique=False)
    op.drop_constraint(op.f('tool_call_logs_api_key_id_fkey'), 'tool_call_logs', type_='foreignkey')
    op.drop_constraint(op.f('tool_call_logs_tool_id_fkey'), 'tool_call_logs', type_='foreignkey')
    op.drop_constraint(op.f('tool_call_logs_project_id_fkey'), 'tool_call_logs', type_='foreignkey')
    op.drop_constraint(op.f('tool_call_logs_called_by_user_id_fkey'), 'tool_call_logs', type_='foreignkey')
    op.drop_constraint(op.f('tool_call_logs_server_id_fkey'), 'tool_call_logs', type_='foreignkey')
    op.alter_column('tool_preferences', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('tool_preferences', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.drop_index(op.f('idx_tool_preferences_enabled'), table_name='tool_preferences')
    op.drop_index(op.f('idx_tool_preferences_project_server'), table_name='tool_preferences')
    op.add_column('user_favorites', sa.Column('target_id', sa.String(length=255), nullable=False))
    op.add_column('user_favorites', sa.Column('target_name', sa.String(length=255), nullable=False))
    op.alter_column('user_favorites', 'project_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('user_favorites', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('user_favorites', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.drop_constraint(op.f('user_favorites_user_id_favorite_type_server_id_tool_id_proj_key'), 'user_favorites', type_='unique')
    op.create_unique_constraint('uq_user_project_favorite', 'user_favorites', ['user_id', 'project_id', 'favorite_type', 'target_id'])
    op.drop_constraint(op.f('user_favorites_tool_id_fkey'), 'user_favorites', type_='foreignkey')
    op.drop_constraint(op.f('user_favorites_server_id_fkey'), 'user_favorites', type_='foreignkey')
    op.drop_column('user_favorites', 'tool_id')
    op.drop_column('user_favorites', 'display_order')
    op.drop_column('user_favorites', 'server_id')
    op.drop_column('user_favorites', 'notes')
    op.alter_column('worker_configs', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_comment='Configuration creation time')
    op.alter_column('worker_configs', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_comment='Last update time')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('worker_configs', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_comment='Last update time')
    op.alter_column('worker_configs', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_comment='Configuration creation time')
    op.add_column('user_favorites', sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('user_favorites', sa.Column('server_id', sa.UUID(), autoincrement=False, nullable=True))
    op.add_column('user_favorites', sa.Column('display_order', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('user_favorites', sa.Column('tool_id', sa.UUID(), autoincrement=False, nullable=True))
    op.create_foreign_key(op.f('user_favorites_server_id_fkey'), 'user_favorites', 'mcp_servers', ['server_id'], ['id'])
    op.create_foreign_key(op.f('user_favorites_tool_id_fkey'), 'user_favorites', 'mcp_tools', ['tool_id'], ['id'])
    op.drop_constraint('uq_user_project_favorite', 'user_favorites', type_='unique')
    op.create_unique_constraint(op.f('user_favorites_user_id_favorite_type_server_id_tool_id_proj_key'), 'user_favorites', ['user_id', 'favorite_type', 'server_id', 'tool_id', 'project_id'], postgresql_nulls_not_distinct=False)
    op.alter_column('user_favorites', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('user_favorites', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('user_favorites', 'project_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.drop_column('user_favorites', 'target_name')
    op.drop_column('user_favorites', 'target_id')
    op.create_index(op.f('idx_tool_preferences_project_server'), 'tool_preferences', ['project_id', 'server_id'], unique=False)
    op.create_index(op.f('idx_tool_preferences_enabled'), 'tool_preferences', ['project_id', 'server_id', 'is_enabled'], unique=False)
    op.alter_column('tool_preferences', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('tool_preferences', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.create_foreign_key(op.f('tool_call_logs_server_id_fkey'), 'tool_call_logs', 'mcp_servers', ['server_id'], ['id'])
    op.create_foreign_key(op.f('tool_call_logs_called_by_user_id_fkey'), 'tool_call_logs', 'users', ['called_by_user_id'], ['id'])
    op.create_foreign_key(op.f('tool_call_logs_project_id_fkey'), 'tool_call_logs', 'projects', ['project_id'], ['id'])
    op.create_foreign_key(op.f('tool_call_logs_tool_id_fkey'), 'tool_call_logs', 'mcp_tools', ['tool_id'], ['id'])
    op.create_foreign_key(op.f('tool_call_logs_api_key_id_fkey'), 'tool_call_logs', 'api_keys', ['api_key_id'], ['id'])
    op.drop_index(op.f('ix_tool_call_logs_tool_name'), table_name='tool_call_logs')
    op.drop_index(op.f('ix_tool_call_logs_timestamp'), table_name='tool_call_logs')
    op.drop_index(op.f('ix_tool_call_logs_status'), table_name='tool_call_logs')
    op.drop_index(op.f('ix_tool_call_logs_session_id'), table_name='tool_call_logs')
    op.drop_index(op.f('ix_tool_call_logs_server_id'), table_name='tool_call_logs')
    op.drop_index(op.f('ix_tool_call_logs_request_id'), table_name='tool_call_logs')
    op.drop_index(op.f('ix_tool_call_logs_project_id'), table_name='tool_call_logs')
    op.drop_index(op.f('ix_teams_slug'), table_name='teams')
    op.create_index(op.f('ix_teams_slug'), 'teams', ['slug'], unique=False)
    op.create_unique_constraint(op.f('teams_slug_key'), 'teams', ['slug'], postgresql_nulls_not_distinct=False)
    op.drop_constraint(None, 'server_logs', type_='foreignkey')
    op.create_foreign_key(op.f('server_logs_server_id_fkey'), 'server_logs', 'mcp_servers', ['server_id'], ['id'])
    op.drop_index('idx_server_logs_server_timestamp', table_name='server_logs')
    op.drop_index('idx_server_logs_level_timestamp', table_name='server_logs')
    op.drop_index('idx_server_logs_category_timestamp', table_name='server_logs')
    op.alter_column('projects', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('projects', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('project_members', 'joined_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.drop_column('mcp_servers', 'server_metadata')
    op.alter_column('client_sessions', 'user_agent',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.drop_constraint(None, 'activities', type_='foreignkey')
    op.drop_constraint(None, 'activities', type_='foreignkey')
    op.drop_constraint(None, 'activities', type_='foreignkey')
    op.create_foreign_key(op.f('activities_user_id_fkey'), 'activities', 'users', ['user_id'], ['id'])
    op.create_foreign_key(op.f('activities_project_id_fkey'), 'activities', 'projects', ['project_id'], ['id'])
    op.create_foreign_key(op.f('activities_server_id_fkey'), 'activities', 'mcp_servers', ['server_id'], ['id'])
    op.create_foreign_key(op.f('activities_team_id_fkey'), 'activities', 'teams', ['team_id'], ['id'])
    op.drop_index('idx_activities_user_created', table_name='activities')
    op.drop_index('idx_activities_type_created', table_name='activities')
    op.drop_index('idx_activities_team_created', table_name='activities')
    op.drop_index('idx_activities_severity', table_name='activities')
    op.drop_index('idx_activities_resource', table_name='activities')
    op.drop_index('idx_activities_project_created', table_name='activities')
    op.alter_column('activities', 'tags',
               existing_type=sa.JSON(),
               type_=postgresql.ARRAY(sa.VARCHAR()),
               existing_nullable=True,
               postgresql_using='ARRAY(SELECT json_array_elements_text(tags))')
    op.alter_column('activities', 'session_id',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=100),
               existing_nullable=True)
    op.alter_column('activities', 'ip_address',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=45),
               existing_nullable=True)
    op.alter_column('activities', 'severity',
               existing_type=sa.String(length=20),
               type_=postgresql.ENUM('info', 'warning', 'error', 'success', name='activityseverity'),
               existing_nullable=False)
    op.alter_column('activities', 'type',
               existing_type=sa.String(length=50),
               type_=postgresql.ENUM('SERVER_CREATED', 'SERVER_UPDATED', 'SERVER_DELETED', 'SERVER_STARTED', 'SERVER_STOPPED', 'TOOL_CALLED', 'PROJECT_CREATED', 'PROJECT_UPDATED', 'PROJECT_DELETED', 'TEAM_CREATED', 'TEAM_UPDATED', 'TEAM_DELETED', 'USER_JOINED', 'USER_LEFT', 'API_KEY_CREATED', 'API_KEY_DELETED', 'TOOL_EXECUTED', 'TOOL_FAILED', 'MEMBER_INVITED', 'MEMBER_JOINED', 'MEMBER_REMOVED', 'MEMBER_ROLE_CHANGED', 'API_KEY_ROTATED', 'PROJECT_SETTINGS_UPDATED', 'TEAM_SETTINGS_UPDATED', 'SESSION_CREATED', 'SESSION_ENDED', 'SERVER_RESTARTED', name='activitytype'),
               existing_nullable=False)
    # ### end Alembic commands ###
