"""Unify SSE and Message authentication to JWT authentication

Revision ID: jwt_auth_unification
Revises: 38d4bd81b787
Create Date: 2025-06-25 19:10:00.000000

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision: str = 'jwt_auth_unification'
down_revision: Union[str, None] = '38d4bd81b787'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def table_exists(table_name):
    """Check if a table exists in the database."""
    bind = op.get_bind()
    inspector = sa.inspect(bind)
    return table_name in inspector.get_table_names()


def column_exists(table_name, column_name):
    """Check if a column exists in a table."""
    bind = op.get_bind()
    inspector = sa.inspect(bind)
    columns = [col['name'] for col in inspector.get_columns(table_name)]
    return column_name in columns


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Check if projects table exists
    if table_exists('projects'):
        # Add jwt_auth_required column
        if not column_exists('projects', 'jwt_auth_required'):
            op.add_column('projects', sa.Column('jwt_auth_required', sa.Boolean(), nullable=False, server_default='true'))
        
        # Migrate existing data: use conservative approach - if either old field was True, set jwt_auth_required to True
        if column_exists('projects', 'sse_auth_required') and column_exists('projects', 'message_auth_required'):
            op.execute("""
                UPDATE projects 
                SET jwt_auth_required = (sse_auth_required OR message_auth_required)
            """)
        
        # Drop old columns if they exist
        if column_exists('projects', 'sse_auth_required'):
            op.drop_column('projects', 'sse_auth_required')
        
        if column_exists('projects', 'message_auth_required'):
            op.drop_column('projects', 'message_auth_required')
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Check if projects table exists
    if table_exists('projects'):
        # Re-add the old columns
        if not column_exists('projects', 'sse_auth_required'):
            op.add_column('projects', sa.Column('sse_auth_required', sa.Boolean(), nullable=False, server_default='false'))
        
        if not column_exists('projects', 'message_auth_required'):
            op.add_column('projects', sa.Column('message_auth_required', sa.Boolean(), nullable=False, server_default='true'))
        
        # Migrate data back: use jwt_auth_required for both old columns
        if column_exists('projects', 'jwt_auth_required'):
            op.execute("""
                UPDATE projects 
                SET sse_auth_required = jwt_auth_required,
                    message_auth_required = jwt_auth_required
            """)
        
        # Drop the new column if it exists
        if column_exists('projects', 'jwt_auth_required'):
            op.drop_column('projects', 'jwt_auth_required')
    
    # ### end Alembic commands ###