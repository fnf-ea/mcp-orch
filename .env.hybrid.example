# MCP Orchestrator Hybrid Deployment Environment Configuration
# Copy this file to .env and customize for your deployment

# =============================================================================
# DATABASE CONFIGURATION (Choose ONE option)
# =============================================================================

# OPTION 1: Database URL (Recommended - works for all environments)
# Local PostgreSQL (Docker)
DATABASE_URL=postgresql+asyncpg://mcp_orch:mcp_password@localhost:5432/mcp_orch

# Cloud database examples (uncomment and modify as needed):
# AWS RDS:
# DATABASE_URL=postgresql+asyncpg://admin:password@mcp-db.cluster-xxx.us-east-1.rds.amazonaws.com:5432/mcp_orch
# AWS Aurora:
# DATABASE_URL=postgresql+asyncpg://admin:password@aurora-cluster.cluster-xxx.us-east-1.rds.amazonaws.com:5432/mcp_orch
# Supabase:
# DATABASE_URL=postgresql+asyncpg://postgres:password@db.xxx.supabase.co:5432/postgres
# Google Cloud SQL:
# DATABASE_URL=postgresql+asyncpg://user:pass@xxx.xxx.xxx.xxx:5432/mcp_orch
# SQLite (Minimal):
# DATABASE_URL=sqlite:///./mcp_orch.db

# OPTION 2: Individual connection settings (Alternative for simple environments)
# Comment out DATABASE_URL above if using these individual settings
# DB_USER=mcp_orch
# DB_PASSWORD=mcp_password
# DB_NAME=mcp_orch
# DB_HOST=localhost
# DB_PORT=5432

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================

# JWT Secret (Generate with: openssl rand -hex 32)
JWT_SECRET=your-jwt-secret-key-here-please-change-this-in-production

# NextAuth Secret (Generate with: openssl rand -hex 32)
NEXTAUTH_SECRET=your-nextauth-secret-key-here-please-change-this-in-production
AUTH_SECRET=your-nextauth-secret-key-here-please-change-this-in-production

# =============================================================================
# SERVER CONFIGURATION
# =============================================================================

# Backend server settings (Native installation)
SERVER__HOST=0.0.0.0
SERVER__PORT=8000

# Frontend settings (Docker container)
FRONTEND_PORT=3000
NEXTAUTH_URL=http://localhost:3000
NEXT_PUBLIC_MCP_API_URL=http://localhost:8000

# =============================================================================
# ADMIN USER SETUP (Manual Process)
# =============================================================================

# How to become an admin:
# 1. Start the application
# 2. Sign up through the web interface (Google/GitHub OAuth or email)
# 3. Contact system administrator to manually assign admin privileges in the database
# 4. Or use database tools to promote your account
# 
# Note: Automatic admin user creation is disabled for security reasons
# INITIAL_ADMIN_EMAIL is no longer used for automatic account creation
# INITIAL_ADMIN_EMAIL=your-email@example.com

# =============================================================================
# MONITORING & LOGGING
# =============================================================================

# Log level: DEBUG, INFO, WARNING, ERROR
LOG_LEVEL=INFO

# =============================================================================
# DEVELOPMENT SETTINGS
# =============================================================================

# Environment
ENV=development

# Enable debug mode
DEBUG=false

# API Documentation
API_DOCS_ENABLED=true

# =============================================================================
# MCP SERVER SETTINGS
# =============================================================================

# Maximum concurrent MCP servers
MAX_CONCURRENT_SERVERS=20

# MCP server timeout (seconds)
MCP_TIMEOUT_SECONDS=60

# Workspace directory for MCP servers
MCP_WORKSPACE_DIR=/var/lib/mcp-orchestrator/workspaces

# Allow MCP servers to execute host commands (npm, node, docker)
MCP_ALLOW_HOST_COMMANDS=true

# MCP Session Manager configuration
MCP_SESSION_TIMEOUT_MINUTES=30
MCP_SESSION_CLEANUP_INTERVAL_MINUTES=5

# =============================================================================
# MCP DATA ENCRYPTION
# =============================================================================

# CRITICAL: This key is used to encrypt MCP server arguments and environment variables
# If you lose this key, encrypted server data cannot be recovered
# For production, generate a secure random key and never share it
# Generate command: python3 -c "import secrets; print(secrets.token_urlsafe(32))"
MCP_ENCRYPTION_KEY=your-secure-encryption-key-change-this-in-production