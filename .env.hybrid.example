# MCP Orchestrator Hybrid Deployment Environment Configuration
# Copy this file to .env and customize for your deployment

# =============================================================================
# DATABASE CONFIGURATION (Choose ONE option)
# =============================================================================

# üö® PRODUCTION DEPLOYMENT: Replace localhost database with production database

# OPTION 1: Database URL (Recommended - works for all environments)
# Development (localhost) - Local PostgreSQL:
DATABASE_URL=postgresql+asyncpg://mcp_orch:mcp_password@localhost:5432/mcp_orch?options=-csearch_path%3Dmcp_orch

# Production examples (UNCOMMENT and MODIFY for your deployment):
# AWS RDS:
# DATABASE_URL=postgresql+asyncpg://admin:your-password@mcp-db.cluster-xxx.us-east-1.rds.amazonaws.com:5432/mcp_orch?options=-csearch_path%3Dmcp_orch
# AWS Aurora:
# DATABASE_URL=postgresql+asyncpg://admin:your-password@aurora-cluster.cluster-xxx.us-east-1.rds.amazonaws.com:5432/mcp_orch?options=-csearch_path%3Dmcp_orch
# Google Cloud SQL:
# DATABASE_URL=postgresql+asyncpg://user:your-password@xxx.xxx.xxx.xxx:5432/mcp_orch?options=-csearch_path%3Dmcp_orch
# Azure Database for PostgreSQL:
# DATABASE_URL=postgresql+asyncpg://user:your-password@server.postgres.database.azure.com:5432/mcp_orch?options=-csearch_path%3Dmcp_orch
# Supabase:
# DATABASE_URL=postgresql+asyncpg://postgres:your-password@db.xxx.supabase.co:5432/postgres?options=-csearch_path%3Dmcp_orch
# SQLite (Not recommended for production):
# DATABASE_URL=sqlite:///./mcp_orch.db

# ‚ö†Ô∏è  Important: Always use 'postgresql+asyncpg://' (not 'postgresql://') for async support

# OPTION 2: Individual connection settings (Alternative for simple environments)
# Comment out DATABASE_URL above if using these individual settings
# DB_USER=mcp_orch
# DB_PASSWORD=mcp_password
# DB_NAME=mcp_orch
# DB_HOST=localhost
# DB_PORT=5432

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================

# üö® PRODUCTION DEPLOYMENT: Generate secure random secrets (NEVER use defaults)

# JWT Secret (Generate with: openssl rand -hex 32)
# Development (CHANGE THIS):
JWT_SECRET=your-jwt-secret-key-here-please-change-this-in-production

# NextAuth Secret (Generate with: openssl rand -hex 32)  
# Development (CHANGE THIS):
NEXTAUTH_SECRET=your-nextauth-secret-key-here-please-change-this-in-production
AUTH_SECRET=your-nextauth-secret-key-here-please-change-this-in-production

# Production: Generate secure secrets like this:
# openssl rand -hex 32
# Example output: f20102b982ab39f8a08f1afd4fdcab5a14f98e14aea699f421a52a874114ca2a

# =============================================================================
# SERVER CONFIGURATION
# =============================================================================

# Backend server settings (Native installation)
SERVER__HOST=0.0.0.0
SERVER__PORT=8000

# Frontend settings (Docker container)
FRONTEND_PORT=3000

# üö® PRODUCTION DEPLOYMENT: Change these URLs to your actual domains
# Development (localhost):
NEXTAUTH_URL=http://localhost:3000
NEXT_PUBLIC_MCP_API_URL=http://localhost:8000

# Production examples (CHANGE THESE for your deployment):
# NEXTAUTH_URL=https://your-domain.com
# NEXT_PUBLIC_MCP_API_URL=https://api.your-domain.com
# MCP_SERVER_BASE_URL=https://api.your-domain.com

# Note: NEXTAUTH_URL is where users access the web interface
#       NEXT_PUBLIC_MCP_API_URL is your backend API endpoint
#       Both must use HTTPS in production with valid SSL certificates

# =============================================================================
# ADMIN USER SETUP (HYBRID SYSTEM)
# =============================================================================

# Admin privileges are granted automatically using a hybrid approach:
#
# ü•á PRIORITY 1: Environment Variable (Explicit Admin)
#    Set INITIAL_ADMIN_EMAIL to designate a specific user as admin
#    This user will receive admin privileges when they sign up or at server startup
#
# ü•à PRIORITY 2: First User (Automatic Admin) 
#    If no INITIAL_ADMIN_EMAIL is set, the very first user to sign up
#    will automatically receive admin privileges
#
# Examples:
# Option A - Designate specific admin:
# INITIAL_ADMIN_EMAIL=admin@company.com
#
# Option B - Let first user become admin (comment out or leave empty):
# INITIAL_ADMIN_EMAIL=
#
# How it works:
# 1. If INITIAL_ADMIN_EMAIL is set: Only that specific email gets admin privileges
# 2. If INITIAL_ADMIN_EMAIL is not set: The first user to sign up becomes admin
# 3. All subsequent users are regular users (no admin privileges)
#
INITIAL_ADMIN_EMAIL=your-email@example.com

# =============================================================================
# MONITORING & LOGGING
# =============================================================================

# Log level: DEBUG, INFO, WARNING, ERROR
LOG_LEVEL=INFO

# =============================================================================
# ENVIRONMENT SETTINGS
# =============================================================================

# üö® PRODUCTION DEPLOYMENT: Change to production mode

# Environment mode
# Development:
ENV=development
NODE_ENV=development

# Production (CHANGE THESE for deployment):
# ENV=production  
# NODE_ENV=production

# Debug and development features
# Development:
DEBUG=false
API_DOCS_ENABLED=true

# Production (recommended settings):
# DEBUG=false
# API_DOCS_ENABLED=false  # Disable API docs in production for security

# Proxy/Load Balancer support (set to true if using nginx, cloudflare, etc.)
# AUTH_TRUST_HOST=true

# =============================================================================
# MCP SERVER SETTINGS
# =============================================================================

# Maximum concurrent MCP servers
MAX_CONCURRENT_SERVERS=20

# MCP server timeout (seconds)
MCP_TIMEOUT_SECONDS=60

# Workspace directory for MCP servers
MCP_WORKSPACE_DIR=/var/lib/mcp-orchestrator/workspaces

# Allow MCP servers to execute host commands (npm, node, docker)
MCP_ALLOW_HOST_COMMANDS=true

# MCP Session Manager configuration
MCP_SESSION_TIMEOUT_MINUTES=30
MCP_SESSION_CLEANUP_INTERVAL_MINUTES=5

# =============================================================================
# MCP DATA ENCRYPTION
# =============================================================================

# üö® PRODUCTION DEPLOYMENT: Generate unique encryption key (CRITICAL)

# CRITICAL: This key is used to encrypt MCP server arguments and environment variables
# If you lose this key, encrypted server data cannot be recovered
# Each environment MUST have a different key for security

# Development (CHANGE THIS):
MCP_ENCRYPTION_KEY=your-secure-encryption-key-change-this-in-production

# Production: Generate a secure random key:
# python3 -c "import secrets; print(secrets.token_urlsafe(32))"
# Example output: D4mDUK8VLBC00neT3ymUrVu_qAAa62-4ZnNeMrlZ-lk

# ‚ö†Ô∏è  Security Notes:
# - Store this key securely (vault, secret manager)
# - Never commit this key to version control  
# - Use different keys for dev/staging/production
# - Backup this key safely - losing it means losing encrypted data